{% set title = 'Problem' %}
{% extends "layout.njk" %}


{% block body %}
<div
    x-cloak
    x-data="{
        hasWallSlug: new URLSearchParams(location.search).has('wall'),
        wallSlug: new URLSearchParams(location.search).get('wall'),
        hasProblemId: new URLSearchParams(location.search).has('problemId'),
        problemId: new URLSearchParams(location.search).get('problemId'),
        problem: {},
        wall: {},
        isNewProblem: false,
        isExistingProblem: true,
        isValidParameters: true,
        isEditing: false,
        isLoading: true,
    }"
    x-init="
        isNewProblem = hasWallSlug && !hasProblemId;
        isExistingProblem = hasWallSlug && hasProblemId;
        isValidParameters = isNewProblem || isExistingProblem;

        if (hasWallSlug) {
            wall = await $store.apiService.getWallSummaryAsync(wallSlug);
        } else {
            wall = {};
        }
        if (wall == null)
            isValidParameters = false;

        if (isValidParameters && isExistingProblem) {
            problem = await $store.apiService.getProblemAsync(wallSlug, problemId);
            if (problem === null)
                isValidParameters = false;
        } else if (isValidParameters && isNewProblem) {
            problem = $store.utilService.getNewProblem(wall.defaultWallImageUrl);
            // Start in isEditing mode for new problems
            isEditing = true;
            $dispatch('is-editing-updated', { isEditing: isEditing });
        }

        isLoading = false;
    "
    class="h-full">

    {% loading { while: 'isLoading' } %}

    <!-- Subnav -->
    <div x-cloak x-show="!isLoading && isValidParameters" class="container-w h-10">
        <div class="h-full flex flex-row flex-nowrap justify-between space-x-2 border-b border-slate-300">
            <div class="flex flex-row">
                <a 
                    x-show="hasWallSlug"
                    x-bind:href="`/wall/?wall=${wallSlug}`"
                    class="flex items-end px-2 text-sm text-slate-500 hover:text-blue-700 cursor-pointer">
                    {% iconlabel { icon: 'chevron-left', style: 'py-1' } %}Back{% endiconlabel %}
                </a>
            </div>
            <div class="flex flex-row">
                <a
                    x-show="isExistingProblem && !isEditing"
                    x-on:click="
                        isEditing = true;
                        $dispatch('is-editing-updated', { isEditing: isEditing })
                    "
                    class="flex items-end px-2 text-sm text-slate-500 hover:text-blue-700 cursor-pointer">
                    {% iconlabel { icon: 'edit', style: 'py-1' } %}Edit{% endiconlabel %}
                </a>
                <a
                    x-show="isEditing"
                    x-on:click="
                        isEditing = false;
                        $dispatch('is-editing-updated', { isEditing: isEditing });

                        if (isExistingProblem) {
                            await $store.apiService.updateProblemAsync(wallSlug, problem);
                        } else if (isNewProblem) {
                            problem = await $store.apiService.createProblemAsync(wallSlug, problem);

                            isNewProblem = false;
                            isExistingProblem = true;
                        }

                        window.location.replace(`/problem/?wall=${wallSlug}&problemId=${problem.id}`);
                    "
                    class="flex items-end px-2 text-sm text-slate-500 hover:text-blue-700 cursor-pointer">
                    {% iconlabel { icon: 'save', style: 'py-1' } %}Save{% endiconlabel %}
                </a>
                {% if config.featureFlags.problemDelete %}
                <a
                    x-show="isExistingProblem"
                    class="flex items-end px-2 text-sm text-slate-500 hover:text-blue-700 cursor-pointer">
                    {% iconlabel { icon: 'trash', style: 'py-1' } %}Delete{% endiconlabel %}
                </a>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Content -->
    <main x-cloak x-show="!isLoading" class="container-w px-6 pt-4 pb-8">
        <div x-show="!isLoading && !isValidParameters">
            <h2 class="text-2xl text-slate-700">Invalid URL Parameters</h2>
            <p x-show="!hasWallSlug" class="text-sm text-slate-500">No wall given.</p>
            <p x-show="wall === null" class="text-sm text-slate-500">Wall not found.</p>
            <p x-show="isExistingProblem && problem === null" class="text-sm text-slate-500">Problem not found.</p>
            <p class="text-sm text-slate-500"><a class="text-blue-700 hover:text-blue-900" href="/search/">Search for a spray wall</a> to start crushing.</p>
        </div>

        <!-- Problem Details -->
        <template
            x-if="!isLoading && isValidParameters"
            class="w-full h-full m-0 p-0">
            <div
                {# x-show="isValidParameters" #}
                class="grid grid-cols-1 md-grid-cols-1/3-2/3 gap-4">

                <!-- Left Section -->
                <div class="flex flex-col">
                    <!-- Problem Name -->
                    <div class="mb-2">
                        <label for="problemName" class="input-label">Problem Name</label>
                        <input 
                            id="problemName" 
                            type="text" 
                            class="input-text"
                            x-bind:disabled="!isEditing"
                            x-model="problem.name" />
                    </div>

                    <!-- V Grade -->
                    <div class="mb-2">
                        <label for="problemVGrade" class="input-label">V Grade</label>
                        <input 
                            id="problemVGrade" 
                            type="number" 
                            class="input-text"
                            x-bind:disabled="!isEditing"
                            x-model="problem.vGrade" />
                    </div>

                    <!-- Setter Name -->
                    <div class="mb-2">
                        <label for="problemSetterName" class="input-label">Setter</label>
                        <input 
                            id="problemSetterName"
                            type="text"
                            class="input-text"
                            x-bind:disabled="!isEditing"
                            x-model="problem.setterName" />
                    </div>

                    <!-- Problem Description -->
                    <div class="mb-2">
                        <label for="problemDescription" class="input-label">Description</label>
                        <textarea 
                            id="problemDescription"
                            rows="3"
                            class="input-text"
                            x-bind:disabled="!isEditing"
                            x-model="problem.description">
                        </textarea>
                    </div>
                </div>

                <!-- Right Section -->
                <div class="flex flex-col">
                    <label for="holds" class="input-label">Holds</label>

                    <!-- Holds Editor Component -->
                    <div
                        x-data="{
                            holdTypes: $store.utilService.getAllHoldTypes(),
                            holdTypeSelectedId: 0,
                        }"
                        class="flex flex-col">
                        <div 
                            id="holds" 
                            x-bind:class="{
                                'holds-editor-size overflow-auto input-holds-editor': true, 
                                'input-holds-editor-disabled': !isEditing
                            }"
                            x-init="
                                // $store.holdsEditorService.wallImageUrl = problem.wallImageUrl;
                                $store.holdsEditorService.problem = problem;
                            "
                            x-on:hold-added="
                                problem.holds.push($event.detail.hold);
                                $store.holdsEditorService.problem = problem;
                            ">
                            {% include 'holdsEditorComponent.njk' %}
                        </div>
                        <div x-show="isEditing" class="mt-2 flex flex-row justify-between space-x-2">
                            <div class="button-group">
                                <template x-for="holdType in holdTypes">
                                    <button 
                                        type="button" 
                                        class="flex flex-row flex-nowrap button-group-item" 
                                        x-bind:class="holdTypeSelectedId === holdType.id ? 'button-group-selected' : ''"
                                        x-on:click="
                                            holdTypeSelectedId = holdType.id;
                                            $store.holdsEditorService.selectedHoldTypeId = holdTypeSelectedId;
                                        ">
                                        {# <span x-bind:style="holdTypeSelectedId !== holdType.id ? `color: ${holdType.colour};` : ''"> #}
                                        <span x-bind:style="`color: ${holdType.colour};`">
                                            {% icon 'circle', { height: '18px', hasMarginRight: true } %}
                                        </span>
                                        <span x-text="holdType.text"></span>
                                    </button>
                                </template>
                            </div>
                            <div class="flex flex-row flex-nowrap space-x-2">
                                {% if config.featureFlags.holdsEditorUndo %}
                                <div class="button-group">
                                    <button type="button" class="button-group-item">
                                        {% icon 'rotate-ccw', { height: '18px' } %}
                                    </button>
                                </div>
                                {% endif %}
                                {% if config.featureFlags.holdsEditorZoom %}
                                <!-- Zoom Feature -->
                                <div class="button-group">
                                    <button type="button" class="button-group-item" 
                                        x-on:click="$store.holdsEditorService.zoomOut()">
                                        {% icon 'zoom-out', { height: '18px' } %}
                                    </button>
                                    <button type="button" class="button-group-item"
                                        x-on:click="$store.holdsEditorService.zoomIn()">
                                        {% icon 'zoom-in', { height: '18px' } %}
                                    </button>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </template>
    </main>
<div>
{% endblock %}
